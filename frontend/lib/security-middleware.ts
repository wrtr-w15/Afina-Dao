/**
 * Security middleware –¥–ª—è –∑–∞—â–∏—Ç—ã API endpoints
 */

import { NextRequest, NextResponse } from 'next/server';
import { checkRateLimit, isValidUUID } from './validation';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 */
export function applyRateLimit(
  request: NextRequest,
  maxRequests: number = 100,
  windowMs: number = 60000
): NextResponse | null {
  const ip = request.headers.get('x-forwarded-for') || 
             request.headers.get('x-real-ip') || 
             'unknown';
  
  const { allowed, remaining } = checkRateLimit(ip, maxRequests, windowMs);
  
  if (!allowed) {
    console.warn(`Rate limit exceeded for IP: ${ip}`);
    return NextResponse.json(
      { error: 'Too many requests. Please try again later.' },
      { 
        status: 429,
        headers: {
          'X-RateLimit-Limit': maxRequests.toString(),
          'X-RateLimit-Remaining': '0',
          'X-RateLimit-Reset': new Date(Date.now() + windowMs).toISOString()
        }
      }
    );
  }
  
  return null; // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç UUID –ø–∞—Ä–∞–º–µ—Ç—Ä
 */
export function validateUUIDParam(id: string, paramName: string = 'id'): NextResponse | null {
  if (!isValidUUID(id)) {
    console.warn(`Invalid UUID provided for ${paramName}: ${id}`);
    return NextResponse.json(
      { error: `Invalid ${paramName} format` },
      { status: 400 }
    );
  }
  
  return null; // UUID –≤–∞–ª–∏–¥–µ–Ω
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Content-Type –¥–ª—è POST/PUT –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export function validateContentType(request: NextRequest): NextResponse | null {
  const contentType = request.headers.get('content-type');
  
  if (!contentType || !contentType.includes('application/json')) {
    console.warn('Invalid Content-Type:', contentType);
    return NextResponse.json(
      { error: 'Content-Type must be application/json' },
      { status: 415 }
    );
  }
  
  return null;
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
export function logSuspiciousActivity(
  request: NextRequest,
  reason: string,
  data?: any
): void {
  const ip = request.headers.get('x-forwarded-for') || 
             request.headers.get('x-real-ip') || 
             'unknown';
  const userAgent = request.headers.get('user-agent') || 'unknown';
  const url = request.url;
  
  console.warn('üö® SUSPICIOUS ACTIVITY DETECTED:', {
    timestamp: new Date().toISOString(),
    ip,
    userAgent,
    url,
    reason,
    data
  });
  
  // TODO: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  // –∏–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
 */
export async function validateRequestBodySize(
  request: NextRequest,
  maxSizeBytes: number = 10 * 1024 * 1024 // 10 MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
): Promise<NextResponse | null> {
  try {
    const contentLength = request.headers.get('content-length');
    
    if (contentLength && parseInt(contentLength) > maxSizeBytes) {
      console.warn(`Request body too large: ${contentLength} bytes`);
      return NextResponse.json(
        { error: 'Request body too large' },
        { status: 413 }
      );
    }
    
    return null;
  } catch (error) {
    console.error('Error validating request body size:', error);
    return NextResponse.json(
      { error: 'Invalid request' },
      { status: 400 }
    );
  }
}

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞ API endpoint
 */
export async function secureAPIEndpoint(
  request: NextRequest,
  options: {
    checkRateLimit?: boolean;
    maxRequests?: number;
    windowMs?: number;
    validateContentType?: boolean;
    maxBodySize?: number;
  } = {}
): Promise<NextResponse | null> {
  const {
    checkRateLimit: shouldCheckRateLimit = true,
    maxRequests = 100,
    windowMs = 60000,
    validateContentType: shouldValidateContentType = true,
    maxBodySize = 10 * 1024 * 1024
  } = options;
  
  // 1. Rate limiting
  if (shouldCheckRateLimit) {
    const rateLimitResult = applyRateLimit(request, maxRequests, windowMs);
    if (rateLimitResult) return rateLimitResult;
  }
  
  // 2. Content-Type validation –¥–ª—è POST/PUT
  if (shouldValidateContentType && (request.method === 'POST' || request.method === 'PUT')) {
    const contentTypeResult = validateContentType(request);
    if (contentTypeResult) return contentTypeResult;
  }
  
  // 3. Body size validation
  if (request.method === 'POST' || request.method === 'PUT') {
    const bodySizeResult = await validateRequestBodySize(request, maxBodySize);
    if (bodySizeResult) return bodySizeResult;
  }
  
  return null; // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
}

/**
 * –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç API handler —Å –∑–∞—â–∏—Ç–æ–π
 */
export function withSecurity(
  handler: (request: NextRequest, ...args: any[]) => Promise<NextResponse>,
  options?: {
    checkRateLimit?: boolean;
    maxRequests?: number;
    windowMs?: number;
    validateContentType?: boolean;
    maxBodySize?: number;
  }
) {
  return async (request: NextRequest, ...args: any[]): Promise<NextResponse> => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º security checks
    const securityResult = await secureAPIEndpoint(request, options);
    if (securityResult) return securityResult;
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π handler
    try {
      return await handler(request, ...args);
    } catch (error) {
      console.error('API handler error:', error);
      return NextResponse.json(
        { error: 'Internal server error' },
        { status: 500 }
      );
    }
  };
}

